import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin library project to get you started.
 */

val jacksonVersion = "2.9.4"

group = "com.dc2f"
version = "0.0.1-SNAPSHOT"

plugins {
    // Apply the Kotlin JVM plugin to add support for Kotlin on the JVM
    id("org.jetbrains.kotlin.jvm").version("1.3.10")
}

tasks.withType<KotlinCompile> {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.freeCompilerArgs = listOf("-Xjvm-default=enable")
}

tasks.named<Test>("test") {
    useJUnitPlatform()
}


repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // Use the Kotlin JDK 8 standard library
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    implementation("org.jetbrains.kotlin:kotlin-reflect")

    // logging
    implementation("io.github.microutils:kotlin-logging:1.4.9")
    implementation("org.slf4j:jul-to-slf4j:1.7.25")
    implementation("ch.qos.logback:logback-classic:1.2.1")

    // annoying image stuff
    implementation("net.coobird:thumbnailator:0.4.8")

    // yaml deserialize
    compile("com.fasterxml.jackson.core:jackson-annotations:$jacksonVersion")
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion")

    implementation("com.fasterxml.jackson.module:jackson-module-kotlin:$jacksonVersion")
    implementation("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:$jacksonVersion")
    implementation("com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$jacksonVersion")
    implementation("com.fasterxml.jackson.module:jackson-module-mrbean:$jacksonVersion")

//    compile("org.hibernate.validator:hibernate-validator:6.0.14.Final")
//    implementation("org.glassfish:javax.el:3.0.1-b09")

    // utils
    implementation("org.apache.commons:commons-lang3:3.8.1")
    implementation("org.reflections:reflections:0.9.11")
    compile("com.google.guava:guava:27.0.1-jre")

    implementation("io.ktor:ktor-http-jvm:1.1.2") // mainly for UrlBuilder
    implementation("io.ktor:ktor-http:1.1.2") // mainly for UrlBuilder

    // image io for reading images - jpeg support, bmp: ico support
    compile("com.twelvemonkeys.imageio:imageio-jpeg:3.4.1")
    compile("com.twelvemonkeys.imageio:imageio-bmp:3.4.1")
    compile("org.apache.xmlgraphics:batik-codec:1.10") // required for SVG-inline png support.
    compile("org.apache.xmlgraphics:batik-transcoder:1.10")
    compile("com.twelvemonkeys.imageio:imageio-batik:3.4.1") // SVG support
    implementation("com.ibm.icu:icu4j:63.1")


    // content parsers
    implementation("com.vladsch.flexmark:flexmark-all:0.40.16")
    implementation("org.jodd:jodd-bean:5.0.8") // for resolving paths
    implementation("com.github.spullara.mustache.java:compiler:0.9.6")
    implementation("io.pebbletemplates:pebble:3.0.8")

    // render/"templating"
    compile("org.jetbrains.kotlinx:kotlinx-html-jvm:0.6.12")
    // preprocessors
    implementation("io.bit3:jsass:5.7.3")

    // caching
    implementation("org.ehcache:ehcache:3.6.1")

    // Use the Kotlin test library
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
    testImplementation("org.junit.jupiter:junit-jupiter-api:5.1.0")
    testRuntimeOnly("org.junit.jupiter:junit-jupiter-engine:5.1.0")

    testImplementation("io.mockk:mockk:1.9.1")
}
